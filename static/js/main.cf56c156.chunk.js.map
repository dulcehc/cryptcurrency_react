{"version":3,"sources":["components/Cryptocurrency/Cryptocurrency.js","components/Ticker/Ticker.js","App.js","serviceWorker.js","index.js"],"names":["Cryptocurrency","_this$props$data","this","props","data","rank","id","name","symbol","price_usd","percent_change_1h","percent_change_24h","percent_change_7d","react_default","a","createElement","className","concat","toFixed","Component","Ticker","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetchCryptocurrencyData","interval","setInterval","_this3","axios","get","then","response","result","filter","currency","i","console","log","JSON","stringify","setState","catch","err","tickers","map","components_Cryptocurrency_Cryptocurrency","key","App","components_Ticker_Ticker","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSA4BeA,sMAxBJ,IAAAC,EAUHC,KAAKC,MAAMC,KAPXC,GAHGJ,EAEHK,GAFGL,EAGHI,MACAE,EAJGN,EAIHM,KACAC,EALGP,EAKHO,OACAC,EANGR,EAMHQ,UACAC,EAPGT,EAOHS,kBACAC,EARGV,EAQHU,mBACAC,EATGX,EASHW,kBAGJ,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAS,sBAAAC,OAAwBZ,IACnCQ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBX,EAApC,KAA4CE,EAA5C,KAAoDC,EAApD,KACAK,EAAAC,EAAAC,cAAA,gBAASN,GAAWS,QAAQ,IAC5BL,EAAAC,EAAAC,cAAA,SAAIL,EAAJ,SACAG,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,WACAE,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,mBAnBqBO,+BCqEdC,cAlEb,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAApB,KAAAkB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAApB,KAAAoB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAxB,KAAMC,KACDwB,MAAQ,CACXvB,KAAM,CACJ,CACEE,GAAI,UACJD,KAAM,IACNE,KAAM,UACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAErB,CACEN,GAAI,WACJD,KAAM,IACNE,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAErB,CACEN,GAAI,WACJD,KAAM,IACNE,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,OAhCRS,mFAsCC,IAAAO,EAAA1B,KAClBA,KAAK2B,0BACL3B,KAAK4B,SAAWC,YAAY,kBAAMH,EAAKC,2BAA2B,uDAG1C,IAAAG,EAAA9B,KACxB+B,IAAMC,IAAI,qDACPC,KAAK,SAAAC,GACJ,IAAIC,EAASD,EAAShC,KAAKkC,OAAO,SAACC,EAAUC,GAAX,OAAiBA,GAAK,IACxDC,QAAQC,IAAIC,KAAKC,UAAUP,IAC3BL,EAAKa,SAAS,CAAEzC,KAAMiC,MAEvBS,MAAM,SAAAC,GAAG,OAAIN,QAAQC,IAAIK,sCAI5B,IAAIC,EAAU9C,KAAKyB,MAAMvB,KAAK6C,IAAI,SAACV,GAAD,OAChC1B,EAAAC,EAAAC,cAACmC,EAAD,CAAgB9C,KAAMmC,EAAUY,IAAKZ,EAASjC,OAEhD,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAWgC,GACzBnC,EAAAC,EAAAC,cAAA,mFA7DaI,aCaNiC,mLAXX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,oCAEFF,EAAAC,EAAAC,cAACsC,EAAD,cAPUlC,aCKEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.cf56c156.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cryptocurrency.css';\n\nclass Cryptocurrency extends Component {\n  render() {\n    let {\n        id,\n        rank,\n        name,\n        symbol,\n        price_usd,\n        percent_change_1h,\n        percent_change_24h,\n        percent_change_7d,\n    } = this.props.data;\n\n    return (\n      <li className={`cryptocurrency rank${rank}`}>\n        <p className=\"cryptocurrency-name\">{rank}. {name} ({symbol})</p>\n        <h1>${ (+price_usd).toFixed(2) }</h1>\n        <p>{percent_change_1h}% 1hr</p>\n        <p>{percent_change_24h}% 24hrs</p>\n        <p>{percent_change_7d}% 7days</p>\n      </li>\n    );\n  }\n}\n\nexport default Cryptocurrency;\n","import React, { Component } from 'react';\nimport './Ticker.css';\nimport Cryptocurrency from '../Cryptocurrency/Cryptocurrency';\nimport axios from 'axios';\n\nclass Ticker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [\n        {\n          id: \"bitcoin\",\n          rank: \"1\",\n          name: \"Bitcoin\",\n          symbol: \"BTC\",\n          price_usd: \"1\",\n          percent_change_1h: \"0\",\n          percent_change_24h: \"0\",\n          percent_change_7d: \"0\",\n        },\n        {\n          id: \"ethereum\",\n          rank: \"2\",\n          name: \"Ethereum\",\n          symbol: \"ETH\",\n          price_usd: \"1\",\n          percent_change_1h: \"0\",\n          percent_change_24h: \"0\",\n          percent_change_7d: \"0\",\n        },\n        {\n          id: \"litecoin\",\n          rank: \"3\",\n          name: \"Litecoin\",\n          symbol: \"LTC\",\n          price_usd: \"1\",\n          percent_change_1h: \"0\",\n          percent_change_24h: \"0\",\n          percent_change_7d: \"0\",\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCryptocurrencyData();\n    this.interval = setInterval(() => this.fetchCryptocurrencyData(), 60 * 1000);\n  }\n\n  fetchCryptocurrencyData() {\n    axios.get(\"https://api.coinmarketcap.com/v1/ticker/?limit=10\")\n      .then(response => {\n        let result = response.data.filter((currency, i) => i <= 3);\n        console.log(JSON.stringify(result));\n        this.setState({ data: result});\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    let tickers = this.state.data.map((currency) =>\n      <Cryptocurrency data={currency} key={currency.id} />\n    );\n    return (\n      <div className=\"tickers-container\">\n        <ul className=\"tickers\">{tickers}</ul>\n        <p>Information updated every minute courtesy of coinmarketcap.com</p>\n      </div>\n    );\n  }\n}\n\nexport default Ticker;","import React, { Component } from 'react';\nimport './App.css';\nimport Ticker from './components/Ticker/Ticker';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h2>Cryptocurrency Ticker</h2>\n        </div>\n        <Ticker/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}